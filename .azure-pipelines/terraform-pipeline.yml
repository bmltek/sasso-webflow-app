trigger:
  branches:
    include:
    - main
  paths:
    include:
    - terraform/*

variables:
  - group: terraform-config
  # Add environment-specific variable groups
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    - group: terraform-prod
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    - group: terraform-dev

stages:
- stage: Validate
  displayName: 'Validate Terraform'
  jobs:
  - job: Validate
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    
    # Initialize Terraform
    - task: TerraformCLI@1
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendType: 'azurerm'
        backendServiceArm: '$(AZURE_SERVICE_CONNECTION)'
        backendAzureRmResourceGroupName: '$(TERRAFORM_STORAGE_RG)'
        backendAzureRmStorageAccountName: '$(TERRAFORM_STORAGE_ACCOUNT)'
        backendAzureRmContainerName: '$(TERRAFORM_CONTAINER_NAME)'
        backendAzureRmKey: '$(TERRAFORM_STATE_KEY)'

    # Terraform Format Check
    - task: TerraformCLI@1
      inputs:
        command: 'fmt'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        
    # Terraform Validation
    - task: TerraformCLI@1
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    # Run tfsec for security scanning
    - script: |
        docker run --rm -v "$(pwd):/src" aquasec/tfsec /src/terraform
      displayName: 'Run tfsec Security Scan'

    # Run checkov for additional security and compliance scanning
    - script: |
        pip install checkov
        checkov -d terraform
      displayName: 'Run Checkov Security Scan'

- stage: Plan
  displayName: 'Plan Infrastructure Changes'
  dependsOn: Validate
  condition: succeeded('Validate')
  jobs:
  - job: Plan
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

    # Initialize Terraform
    - task: TerraformCLI@1
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendType: 'azurerm'
        backendServiceArm: '$(AZURE_SERVICE_CONNECTION)'
        backendAzureRmResourceGroupName: '$(TERRAFORM_STORAGE_RG)'
        backendAzureRmStorageAccountName: '$(TERRAFORM_STORAGE_ACCOUNT)'
        backendAzureRmContainerName: '$(TERRAFORM_CONTAINER_NAME)'
        backendAzureRmKey: '$(TERRAFORM_STATE_KEY)'

    # Select workspace based on branch
    - task: TerraformCLI@1
      inputs:
        command: 'workspace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: 'select $(TF_WORKSPACE)'

    # Create plan
    - task: TerraformCLI@1
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: '$(AZURE_SERVICE_CONNECTION)'
        publishPlanResults: 'TerraformPlan'
        commandOptions: '-out=$(Build.ArtifactStagingDirectory)/terraform.tfplan'

    # Publish plan artifact
    - publish: $(Build.ArtifactStagingDirectory)/terraform.tfplan
      artifact: TerraformPlan

- stage: Apply
  displayName: 'Apply Infrastructure Changes'
  dependsOn: Plan
  condition: and(succeeded('Plan'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Apply
    environment: 'production'  # Create this environment in Azure DevOps
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          # Download plan artifact
          - download: current
            artifact: TerraformPlan

          # Initialize Terraform
          - task: TerraformCLI@1
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              backendType: 'azurerm'
              backendServiceArm: '$(AZURE_SERVICE_CONNECTION)'
              backendAzureRmResourceGroupName: '$(TERRAFORM_STORAGE_RG)'
              backendAzureRmStorageAccountName: '$(TERRAFORM_STORAGE_ACCOUNT)'
              backendAzureRmContainerName: '$(TERRAFORM_CONTAINER_NAME)'
              backendAzureRmKey: '$(TERRAFORM_STATE_KEY)'

          # Select workspace
          - task: TerraformCLI@1
            inputs:
              command: 'workspace'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              commandOptions: 'select $(TF_WORKSPACE)'

          # Apply plan
          - task: TerraformCLI@1
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              environmentServiceName: '$(AZURE_SERVICE_CONNECTION)'
              commandOptions: '$(Pipeline.Workspace)/TerraformPlan/terraform.tfplan'