parameters:
  serviceName: ''
  serviceDirectory: ''
  dockerfilePath: ''
  sonarProjectKey: ''
  sonarProjectName: ''

stages:
- stage: Quality
  displayName: Quality Gate
  jobs:
  - job: CodeAnalysis
    displayName: Code Analysis
    pool:
      vmImage: ubuntu-latest
    steps:
    # Install dependencies
    - task: NodeJS@1
      inputs:
        versionSpec: '20.x'
    
    - script: |
        npm ci
      workingDirectory: ${{ parameters.serviceDirectory }}
      displayName: 'Install dependencies'

    # SonarQube analysis setup
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'Your-SonarQube-Service-Connection'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: ${{ parameters.sonarProjectKey }}
        cliProjectName: ${{ parameters.sonarProjectName }}
        extraProperties: |
          sonar.sources=${{ parameters.serviceDirectory }}/src
          sonar.tests=${{ parameters.serviceDirectory }}/tests
          sonar.javascript.lcov.reportPaths=${{ parameters.serviceDirectory }}/coverage/lcov.info
          sonar.typescript.tsconfigPath=${{ parameters.serviceDirectory }}/tsconfig.json
          sonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts
    
    # Run tests with coverage
    - script: |
        npm run test:coverage
      workingDirectory: ${{ parameters.serviceDirectory }}
      displayName: 'Run tests with coverage'

    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '${{ parameters.serviceDirectory }}/junit.xml'
        mergeTestResults: true
        testRunTitle: ${{ parameters.serviceName }} Tests

    # Publish code coverage
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '${{ parameters.serviceDirectory }}/coverage/cobertura-coverage.xml'
        reportDirectory: '${{ parameters.serviceDirectory }}/coverage'

    # Run SonarQube analysis
    - task: SonarQubeAnalyze@5
    - task: SonarQubePublish@5

    # Security vulnerability scan
    - task: WhiteSource@21
      inputs:
        cwd: ${{ parameters.serviceDirectory }}
        projectName: ${{ parameters.serviceName }}

- stage: Build
  dependsOn: Quality
  condition: succeeded('Quality')
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: ${{ parameters.serviceName }}
        dockerfile: ${{ parameters.dockerfilePath }}
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(Build.SourcesDirectory)/${{ parameters.serviceDirectory }}
        tags: |
          $(Build.BuildId)
          latest

    - upload: kubernetes
      artifact: kubernetes

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-latest
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/kubernetes/${{ parameters.serviceName }}.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/${{ parameters.serviceName }}:$(Build.BuildId)