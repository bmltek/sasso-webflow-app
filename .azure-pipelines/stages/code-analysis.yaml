---
parameters:
  sonarProjectKey: 'princemike05_Sasso-Webflow'
  sonarOrganization: 'princemike05'

stages:
- stage: CodeAnalysis
  displayName: 'Code Analysis and Testing'
  jobs:
  - job: Analysis
    steps:
    - checkout: self
      fetchDepth: 0
      
    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'sonarcloud-connection'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '${{ parameters.sonarProjectKey }}'
        cliProjectName: '${{ parameters.sonarProjectKey }}'
        cliSources: '.'
        organization: '${{ parameters.sonarOrganization }}'
        extraProperties: |
          sonar.projectKey=${{ parameters.sonarProjectKey }}
          sonar.organization=${{ parameters.sonarOrganization }}
          sonar.sources=src
          sonar.tests=src
          sonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
          sonar.typescript.lcov.reportPaths=coverage/lcov.info
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
          sonar.coverage.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx,**/tests/**/*
          sonar.cpd.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
          sonar.sourceEncoding=UTF-8
          sonar.verbose=true

    - task: Npm@1
      displayName: 'Install dependencies'
      inputs:
        command: 'install'
        workingDir: '.'

    - task: Npm@1
      displayName: 'Install testing dependencies'
      inputs:
        command: 'custom'
        workingDir: '.'
        customCommand: 'install -D ts-node @testing-library/react @testing-library/jest-dom @testing-library/user-event jest-environment-jsdom identity-obj-proxy'

    - task: Npm@1
      displayName: 'Run tests'
      inputs:
        command: 'custom'
        workingDir: '.'
        customCommand: 'test --coverage --watchAll=false'

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Analysis'

    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud Results'
      inputs:
        pollingTimeoutSec: '300'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Coverage Results'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'

- stage: DockerBuild
  displayName: 'Build and Scan Docker Images'
  jobs:
  - job: BuildAndScan
    steps:
    - checkout: self
      fetchDepth: 0

    # Frontend build and scan
    - task: Docker@2
      displayName: 'Build frontend Docker image'
      inputs:
        command: 'build'
        Dockerfile: 'frontend/Dockerfile'
        repository: 'frontend'
        tags: |
          latest
          $(Build.BuildId)
        arguments: '--no-cache --build-arg NODE_ENV=production'

    - task: Docker@2
      displayName: 'Scan frontend Docker image'
      inputs:
        command: 'scan'
        image: 'frontend:latest'
        severity: 'HIGH,CRITICAL'
        failOnSeverity: 'HIGH'
        outputFile: 'docker-scan-frontend-results.json'

    # User service build and scan
    - task: Docker@2
      displayName: 'Build user service Docker image'
      inputs:
        command: 'build'
        Dockerfile: 'services/user/Dockerfile'
        repository: 'user-service'
        tags: |
          latest
          $(Build.BuildId)
        arguments: '--no-cache --build-arg NODE_ENV=production'

    - task: Docker@2
      displayName: 'Scan user service Docker image'
      inputs:
        command: 'scan'
        image: 'user-service:latest'
        severity: 'HIGH,CRITICAL'
        failOnSeverity: 'HIGH'
        outputFile: 'docker-scan-user-results.json'

    # Metrics service build and scan
    - task: Docker@2
      displayName: 'Build metrics service Docker image'
      inputs:
        command: 'build'
        Dockerfile: 'services/metrics/Dockerfile'
        repository: 'metrics-service'
        tags: |
          latest
          $(Build.BuildId)
        arguments: '--no-cache --build-arg NODE_ENV=production'

    - task: Docker@2
      displayName: 'Scan metrics service Docker image'
      inputs:
        command: 'scan'
        image: 'metrics-service:latest'
        severity: 'HIGH,CRITICAL'
        failOnSeverity: 'HIGH'
        outputFile: 'docker-scan-metrics-results.json'

    # Analytics service build and scan
    - task: Docker@2
      displayName: 'Build analytics service Docker image'
      inputs:
        command: 'build'
        Dockerfile: 'services/analytics/Dockerfile'
        repository: 'analytics-service'
        tags: |
          latest
          $(Build.BuildId)
        arguments: '--no-cache --build-arg NODE_ENV=production'

    - task: Docker@2
      displayName: 'Scan analytics service Docker image'
      inputs:
        command: 'scan'
        image: 'analytics-service:latest'
        severity: 'HIGH,CRITICAL'
        failOnSeverity: 'HIGH'
        outputFile: 'docker-scan-analytics-results.json'

    # Publish all scan results
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Docker scan results'
      inputs:
        targetPath: 'docker-scan-*.json'
        artifact: 'docker-scan-results'
        publishLocation: 'pipeline' 