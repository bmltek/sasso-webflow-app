---
parameters:
  sonarProjectKey: ''
  sonarOrganization: ''

stages:
- stage: CodeAnalysis
  displayName: 'Code Analysis and Testing'
  jobs:
  - job: Analysis
    steps:
    - checkout: self
      fetchDepth: 0
      
    - task: SonarQubePrepare@5
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarQube: 'SonarCloud'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '${{ parameters.sonarProjectKey }}'
        cliProjectName: '${{ parameters.sonarProjectKey }}'
        cliSources: '.'
        extraProperties: |
          sonar.organization=${{ parameters.sonarOrganization }}
          sonar.projectKey=${{ parameters.sonarProjectKey }}
          sonar.sources=src
          sonar.tests=src
          sonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
          sonar.typescript.lcov.reportPaths=coverage/lcov.info
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
          sonar.coverage.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx,**/tests/**/*
          sonar.cpd.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
          sonar.sourceEncoding=UTF-8

    - task: Npm@1
      displayName: 'Install dependencies'
      inputs:
        command: 'install'
        workingDir: '.'

    - task: Npm@1
      displayName: 'Run tests with coverage'
      inputs:
        command: 'custom'
        workingDir: '.'
        customCommand: 'run test:coverage'

    - task: SonarQubeAnalyze@5
      displayName: 'Run SonarCloud Analysis'

    - task: SonarQubePublish@5
      displayName: 'Publish Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/coverage' 